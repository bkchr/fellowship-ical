name: Validate Staging Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-staging:
    runs-on: ubuntu-latest
    # Grant permission to read deployment statuses
    permissions:
      deployments: read
    env:
      VERCEL_PREVIEW_BYPASS_AUTH: ${{ vars.VERCEL_PREVIEW_BYPASS_AUTH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for GitHub Deployment Status
        id: waitDeployment
        uses: actions/github-script@v6
        with:
          script: |
            // Use the head commit SHA of the pull request branch
            const sha = context.payload.pull_request.head.sha;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            let deploymentUrl = '';

            for (let i = 0; i < 60; i++) { // Loop for ~5 minutes (60 * 5s)
              console.log(`Attempt ${i + 1}: Checking deployments for SHA ${sha}...`);
              // Use github.rest (Octokit) provided by github-script
              const { data: deployments } = await github.rest.repos.listDeployments({
                owner,
                repo,
                sha,
              });

              if (deployments.length === 0) {
                console.log('No deployments found yet.');
              } else {
                // Vercel usually creates one deployment per commit for preview
                // Find the most recent deployment if multiple exist
                const deployment = deployments.sort((a,b) => new Date(b.created_at) - new Date(a.created_at))[0];
                console.log(`Found deployment ID: ${deployment.id}. Checking statuses...`);

                const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
                  owner,
                  repo,
                  deployment_id: deployment.id,
                  per_page: 5, // Check recent statuses
                });

                // Find the latest successful status with an environment_url
                const successStatus = statuses
                  .filter(status => status.state === 'success' && status.environment_url)
                  .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0]; // Get the latest

                if (successStatus) {
                  deploymentUrl = successStatus.environment_url;
                  console.log(`Success status found with URL: ${deploymentUrl}`);
                  break; // Exit loop
                } else {
                  console.log(`No successful deployment status with URL found yet. Latest state: ${statuses[0]?.state}`);
                }
              }

              if (deploymentUrl) break; // Exit outer loop if URL found

              console.log('Waiting 5 seconds before next check...');
              await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds
            }

            if (!deploymentUrl) {
              core.setFailed(`Failed to get deployment URL from GitHub Deployment status for SHA ${sha} after multiple attempts.`);
              return;
            }

            // Ensure URL starts with https:// (Vercel URLs should, but good practice)
            if (!deploymentUrl.startsWith('https://')) {
               deploymentUrl = 'https://' + deploymentUrl;
            }
            core.setOutput('url', deploymentUrl);
            console.log(`Outputting URL: ${deploymentUrl}`);

      - name: Ensure ICAL response
        env:
          PREVIEW_URL: ${{ steps.waitDeployment.outputs.url }}
        run: |
          # Ensure PREVIEW_URL is set
          if [ -z "$PREVIEW_URL" ]; then
            echo "Error: PREVIEW_URL is empty. Deployment URL was not correctly passed from previous step."
            exit 1
          fi
          URL="$PREVIEW_URL/?account=13fvj4bNfrTo8oW6U8525soRp6vhjAFLum6XBdtqq9yP22E7"
          echo "Testing $URL"

          # --- Check Content-Type using curl -I ---
          echo "Fetching headers..."
          HEADERS_OUTPUT=$(curl -s -L --fail -I -H "x-vercel-protection-bypass: ${{ env.VERCEL_PREVIEW_BYPASS_AUTH }}" "$URL")
          CURL_HEADERS_EXIT_CODE=$?

          if [ $CURL_HEADERS_EXIT_CODE -ne 0 ]; then
            echo "Error: curl (headers) command failed with exit code $CURL_HEADERS_EXIT_CODE when fetching $URL"
            echo "--- Headers Output ---"
            echo "$HEADERS_OUTPUT"
            exit 1
          fi

          CONTENT_TYPE=$(echo "$HEADERS_OUTPUT" | grep -i '^content-type:' | awk '{print $2}' | tr -d '\r')
          if [[ "$CONTENT_TYPE" != text/calendar* ]]; then
            echo "Expected Content-Type 'text/calendar', got '$CONTENT_TYPE'"
            echo "--- Headers Output ---"
            echo "$HEADERS_OUTPUT"
            exit 1
          fi
          echo "Content-Type check passed."

          # --- Fetch Body Content and Validate ---
          echo "Fetching body content..."
          ICAL_CONTENT=$(curl -s -L --fail -H "x-vercel-protection-bypass: ${{ env.VERCEL_PREVIEW_BYPASS_AUTH }}" "$URL")
          CURL_BODY_EXIT_CODE=$?

          if [ $CURL_BODY_EXIT_CODE -ne 0 ]; then
            echo "Error: curl (body) command failed with exit code $CURL_BODY_EXIT_CODE when fetching $URL"
            # Body might be empty or partial on failure, print for debugging
            echo "--- Body Output (if any) ---"
            echo "$ICAL_CONTENT"
            exit 1
          fi

          # Check if the body is empty
          if [ -z "$ICAL_CONTENT" ]; then
            echo "Error: Fetched iCal content is empty."
            exit 1
          fi

          echo "Content fetched successfully. Validating..."
          # echo "Content:" # Optional: uncomment to print full content for debugging
          # echo "$ICAL_CONTENT";

          # Check if the body starts with BEGIN:VCALENDAR
          echo "$ICAL_CONTENT" | head -n1 | grep -q "^BEGIN:VCALENDAR" || { echo "Response body does not start with BEGIN:VCALENDAR"; echo "--- Body ---"; echo "$ICAL_CONTENT"; exit 1; }
          echo "BEGIN:VCALENDAR check passed."

          # Check for required event summaries in the body
          echo "$ICAL_CONTENT" | grep -q "^SUMMARY:Claim salary" || { echo "Error: Missing 'Claim salary' event summary."; exit 1; }
          echo "Found 'Claim salary' event."

          echo "$ICAL_CONTENT" | grep -q "^SUMMARY:Salary registration" || { echo "Error: Missing 'Salary registration' event summary."; exit 1; }
          echo "Found 'Salary registration' event."

          echo "$ICAL_CONTENT" | grep -q "^SUMMARY:Demotion approaching" || { echo "Error: Missing 'Demotion approaching' event summary."; exit 1; }
          echo "Found 'Demotion approaching' event."

          echo "All required iCal content checks passed."
